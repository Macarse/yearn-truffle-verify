DEBUG logging is turned ON
Running truffle-plugin-verify v0.5.1
Verifying GenericDyDx@0xeBb622A21Cc341E3A293E892D16C34A39f8b3c34
Reading artifact file at /Users/username/dev/yearn-truffle-verify/build/contracts/GenericDyDx.json
Custom address 0xeBb622A21Cc341E3A293E892D16C34A39f8b3c34 specified
Retrieving constructor parameters from https://api.etherscan.io/api?apiKey=357QJD7FZFIYTSZAQEZ5E2VPEFGCM8SG3E&module=account&action=txlist&address=0xeBb622A21Cc341E3A293E892D16C34A39f8b3c34&page=1&sort=asc&offset=1
Constructor parameters retrieved: 0x000000000000000000000000520a45e22b1eb5d7bde09a445e70708d2957b3650000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000e447944784c656e64657257657468000000000000000000000000000000000000
Sending verify request with POST arguments:
{
  "apikey": "357QJD7FZFIYTSZAQEZ5E2VPEFGCM8SG3E",
  "module": "contract",
  "action": "verifysourcecode",
  "contractaddress": "0xeBb622A21Cc341E3A293E892D16C34A39f8b3c34",
  "sourceCode": "{\"language\":\"Solidity\",\"sources\":{\"/Users/username/dev/yearn-truffle-verify/contracts/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nstruct StrategyParams {\\n    uint256 performanceFee;\\n    uint256 activation;\\n    uint256 debtLimit;\\n    uint256 rateLimit;\\n    uint256 lastReport;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n}\\n\\ninterface VaultAPI is IERC20 {\\n    function apiVersion() external view returns (string memory);\\n\\n    function token() external view returns (address);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n\\n    /*\\n     * View how much the Vault would increase this strategy's borrow limit,\\n     * based on it's present performance (since its last report). Can be used to\\n     * determine expectedReturn in your strategy.\\n     */\\n    function creditAvailable() external view returns (uint256);\\n\\n    /*\\n     * View how much the Vault would like to pull back from the Strategy,\\n     * based on it's present performance (since its last report). Can be used to\\n     * determine expectedReturn in your strategy.\\n     */\\n    function debtOutstanding() external view returns (uint256);\\n\\n    /*\\n     * View how much the Vault expect this strategy to return at the current block,\\n     * based on it's present performance (since its last report). Can be used to\\n     * determine expectedReturn in your strategy.\\n     */\\n    function expectedReturn() external view returns (uint256);\\n\\n    /*\\n     * This is the main contact point where the strategy interacts with the Vault.\\n     * It is critical that this call is handled as intended by the Strategy.\\n     * Therefore, this function will be called by BaseStrategy to make sure the\\n     * integration is correct.\\n     */\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external returns (uint256);\\n\\n    /*\\n     * This function is used in the scenario where there is a newer strategy that\\n     * would hold the same positions as this one, and those positions are easily\\n     * transferrable to the newer strategy. These positions must be able to be\\n     * transferred at the moment this call is made, if any prep is required to\\n     * execute a full transfer in one transaction, that must be accounted for\\n     * separately from this call.\\n     */\\n    function migrateStrategy(address _newStrategy) external;\\n\\n    /*\\n     * This function should only be used in the scenario where the strategy is\\n     * being retired but no migration of the positions are possible, or in the\\n     * extreme scenario that the Strategy needs to be put into \\\"Emergency Exit\\\"\\n     * mode in order for it to exit as quickly as possible. The latter scenario\\n     * could be for any reason that is considered \\\"critical\\\" that the Strategy\\n     * exits it's position as fast as possible, such as a sudden change in market\\n     * conditions leading to losses, or an imminent failure in an external\\n     * dependency.\\n     */\\n    function revokeStrategy() external;\\n\\n    /*\\n     * View the governance address of the Vault to assert privileged functions\\n     * can only be called by governance. The Strategy serves the Vault, so it\\n     * is subject to governance defined by the Vault.\\n     *\\n     */\\n    function governance() external view returns (address);\\n}\\n\\n/*\\n * This interface is here for the keeper bot to use\\n */\\ninterface StrategyAPI {\\n    function apiVersion() external pure returns (string memory);\\n\\n    function name() external pure returns (string memory);\\n\\n    function vault() external view returns (address);\\n\\n    function keeper() external view returns (address);\\n\\n    function tendTrigger(uint256 callCost) external view returns (bool);\\n\\n    function tend() external;\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    event Harvested(uint256 profit);\\n}\\n\\n/*\\n * BaseStrategy implements all of the required functionality to interoperate closely\\n * with the core protocol. This contract should be inherited and the abstract methods\\n * implemented to adapt the strategy to the particular needs it has to create a return.\\n */\\n\\nabstract contract BaseStrategy {\\n    using SafeMath for uint256;\\n\\n    // Version of this contract's StrategyAPI (must match Vault)\\n    function apiVersion() public pure returns (string memory) {\\n        return \\\"0.2.0\\\";\\n    }\\n\\n    // Name of this contract's Strategy (Must override!)\\n    // NOTE: You can use this field to manage the \\\"version\\\" of this strategy\\n    //       e.g. `StrategySomethingOrOtherV1`. It's up to you!\\n    function name() external virtual pure returns (string memory);\\n\\n    VaultAPI public vault;\\n    address public strategist;\\n    address public rewards;\\n    address public keeper;\\n\\n    IERC20 public want;\\n\\n    // So indexers can keep track of this\\n    event Harvested(uint256 profit);\\n\\n    // The minimum number of seconds between harvest calls\\n    // NOTE: Override this value with your own, or set dynamically below\\n    uint256 public minReportDelay = 86400; // ~ once a day\\n\\n    // The minimum multiple that `callCost` must be above the credit/profit to be \\\"justifiable\\\"\\n    // NOTE: Override this value with your own, or set dynamically below\\n    uint256 public profitFactor = 100;\\n\\n    // Use this to adjust the threshold at which running a debt causes a harvest trigger\\n    uint256 public debtThreshold = 0;\\n\\n    bool public emergencyExit;\\n\\n    constructor(address _vault) public {\\n        vault = VaultAPI(_vault);\\n        want = IERC20(vault.token());\\n        want.approve(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\\n        strategist = msg.sender;\\n        rewards = msg.sender;\\n        keeper = msg.sender;\\n    }\\n\\n    function setStrategist(address _strategist) external {\\n        require(msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        strategist = _strategist;\\n    }\\n\\n    function setKeeper(address _keeper) external {\\n        require(msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        keeper = _keeper;\\n    }\\n\\n    function setRewards(address _rewards) external {\\n        require(msg.sender == strategist, \\\"!authorized\\\");\\n        rewards = _rewards;\\n    }\\n\\n    function setMinReportDelay(uint256 _delay) external {\\n        require(msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        minReportDelay = _delay;\\n    }\\n\\n    function setProfitFactor(uint256 _profitFactor) external {\\n        require(msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        profitFactor = _profitFactor;\\n    }\\n\\n    function setDebtThreshold(uint256 _debtThreshold) external {\\n        require(msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        debtThreshold = _debtThreshold;\\n    }\\n\\n    /*\\n     * Resolve governance address from Vault contract, used to make\\n     * assertions on protected functions in the Strategy\\n     */\\n    function governance() internal view returns (address) {\\n        return vault.governance();\\n    }\\n\\n    /*\\n     * Provide an accurate estimate for the total amount of assets (principle + return)\\n     * that this strategy is currently managing, denominated in terms of `want` tokens.\\n     * This total should be \\\"realizable\\\" e.g. the total value that could *actually* be\\n     * obtained from this strategy if it were to divest it's entire position based on\\n     * current on-chain conditions.\\n     *\\n     * NOTE: care must be taken in using this function, since it relies on external\\n     *       systems, which could be manipulated by the attacker to give an inflated\\n     *       (or reduced) value produced by this function, based on current on-chain\\n     *       conditions (e.g. this function is possible to influence through flashloan\\n     *       attacks, oracle manipulations, or other DeFi attack mechanisms).\\n     *\\n     * NOTE: It is up to governance to use this function to correctly order this strategy\\n     *       relative to its peers in the withdrawal queue to minimize losses for the Vault\\n     *       based on sudden withdrawals. This value should be higher than the total debt of\\n     *       the strategy and higher than it's expected value to be \\\"safe\\\".\\n     */\\n    function estimatedTotalAssets() public virtual view returns (uint256);\\n\\n    /*\\n     * Perform any strategy unwinding or other calls necessary to capture the \\\"free return\\\"\\n     * this strategy has generated since the last time it's core position(s) were adjusted.\\n     * Examples include unwrapping extra rewards. This call is only used during \\\"normal operation\\\"\\n     * of a Strategy, and should be optimized to minimize losses as much as possible. This method\\n     * returns any realized profits and/or realized losses incurred, and should return the total\\n     * amounts of profits/losses/debt payments (in `want` tokens) for the Vault's accounting\\n     * (e.g. `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\\n     *\\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`. It is okay for it\\n     *       to be less than `_debtOutstanding`, as that should only used as a guide for how much\\n     *       is left to pay back. Payments should be made to minimize loss from slippage, debt,\\n     *       withdrawal fees, etc.\\n     */\\n    function prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        );\\n\\n    /*\\n     * Perform any adjustments to the core position(s) of this strategy given\\n     * what change the Vault made in the \\\"investable capital\\\" available to the\\n     * strategy. Note that all \\\"free capital\\\" in the strategy after the report\\n     * was made is available for reinvestment. Also note that this number could\\n     * be 0, and you should handle that scenario accordingly.\\n     */\\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\\n\\n    /*\\n     * Make as much capital as possible \\\"free\\\" for the Vault to take. Some slippage\\n     * is allowed, since when this method is called the strategist is no longer receiving\\n     * their performance fee. The goal is for the strategy to divest as quickly as possible\\n     * while not suffering exorbitant losses. This function is used during emergency exit\\n     * instead of `prepareReturn()`. This method returns any realized losses incurred, and\\n     * should also return the amount of `want` tokens available to repay outstanding debt\\n     * to the Vault.\\n     */\\n    function exitPosition() internal virtual returns (uint256 _loss, uint256 _debtPayment);\\n\\n    /*\\n     * Vault calls this function after shares are created during `Vault.report()`.\\n     * You can customize this function to any share distribution mechanism you want.\\n     */\\n    function distributeRewards(uint256 _shares) external virtual {\\n        // Send 100% of newly-minted shares to the rewards address.\\n        vault.transfer(rewards, _shares);\\n    }\\n\\n    /*\\n     * Provide a signal to the keeper that `tend()` should be called. The keeper will provide\\n     * the estimated gas cost that they would pay to call `tend()`, and this function should\\n     * use that estimate to make a determination if calling it is \\\"worth it\\\" for the keeper.\\n     * This is not the only consideration into issuing this trigger, for example if the position\\n     * would be negatively affected if `tend()` is not called shortly, then this can return `true`\\n     * even if the keeper might be \\\"at a loss\\\" (keepers are always reimbursed by Yearn)\\n     *\\n     * NOTE: `callCost` must be priced in terms of `want`\\n     *\\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\\n     */\\n    function tendTrigger(uint256 callCost) public virtual view returns (bool) {\\n        // We usually don't need tend, but if there are positions that need active maintainence,\\n        // overriding this function is how you would signal for that\\n        return false;\\n    }\\n\\n    function tend() external {\\n        if (keeper != address(0)) {\\n            require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        }\\n\\n        // Don't take profits with this call, but adjust for better gains\\n        adjustPosition(vault.debtOutstanding());\\n    }\\n\\n    /*\\n     * Provide a signal to the keeper that `harvest()` should be called. The keeper will provide\\n     * the estimated gas cost that they would pay to call `harvest()`, and this function should\\n     * use that estimate to make a determination if calling it is \\\"worth it\\\" for the keeper.\\n     * This is not the only consideration into issuing this trigger, for example if the position\\n     * would be negatively affected if `harvest()` is not called shortly, then this can return `true`\\n     * even if the keeper might be \\\"at a loss\\\" (keepers are always reimbursed by Yearn)\\n     *\\n     * NOTE: `callCost` must be priced in terms of `want`\\n     *\\n     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\\n     */\\n    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\\n        StrategyParams memory params = vault.strategies(address(this));\\n\\n        // Should not trigger if strategy is not activated\\n        if (params.activation == 0) return false;\\n\\n        // Should trigger if hadn't been called in a while\\n        if (block.timestamp.sub(params.lastReport) >= minReportDelay) return true;\\n\\n        // If some amount is owed, pay it back\\n        // NOTE: Since debt is adjusted in step-wise fashion, it is appropiate to always trigger here,\\n        //       because the resulting change should be large (might not always be the case)\\n        uint256 outstanding = vault.debtOutstanding();\\n        if (outstanding > 0) return true;\\n\\n        // Check for profits and losses\\n        uint256 total = estimatedTotalAssets();\\n        // Trigger if we have a loss to report\\n        if (total.add(debtThreshold) < params.totalDebt) return true;\\n\\n        uint256 profit = 0;\\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\\n\\n        // Otherwise, only trigger if it \\\"makes sense\\\" economically (gas cost is <N% of value moved)\\n        uint256 credit = vault.creditAvailable();\\n        return (profitFactor * callCost < credit.add(profit));\\n    }\\n\\n    function harvest() external {\\n        if (keeper != address(0)) {\\n            require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        }\\n\\n        uint256 profit = 0;\\n        uint256 loss = 0;\\n        uint256 debtPayment = 0;\\n        if (emergencyExit) {\\n            (loss, debtPayment) = exitPosition(); // Free up as much capital as possible\\n            // NOTE: Don't take performance fee in this scenario\\n        } else {\\n            // Free up returns for Vault to pull\\n            (profit, loss, debtPayment) = prepareReturn(vault.debtOutstanding());\\n        }\\n\\n        // Allow Vault to take up to the \\\"harvested\\\" balance of this contract, which is\\n        // the amount it has earned since the last time it reported to the Vault\\n        uint256 debtOutstanding = vault.report(profit, loss, debtPayment);\\n\\n        // Check if free returns are left, and re-invest them\\n        adjustPosition(debtOutstanding);\\n\\n        emit Harvested(profit);\\n    }\\n\\n    /*\\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\\n     * up to `_amountNeeded`. Any excess should be re-invested here as well.\\n     */\\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _amountFreed);\\n\\n    function withdraw(uint256 _amountNeeded) external {\\n        require(msg.sender == address(vault), \\\"!vault\\\");\\n        // Liquidate as much as possible to `want`, up to `_amount`\\n        uint256 amountFreed = liquidatePosition(_amountNeeded);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n        want.transfer(msg.sender, amountFreed);\\n    }\\n\\n    /*\\n     * Do anything necesseary to prepare this strategy for migration, such\\n     * as transfering any reserve or LP tokens, CDPs, or other tokens or stores of value.\\n     */\\n    function prepareMigration(address _newStrategy) internal virtual;\\n\\n    function migrate(address _newStrategy) external {\\n        require(msg.sender == address(vault) || msg.sender == governance());\\n        require(BaseStrategy(_newStrategy).vault() == vault);\\n        prepareMigration(_newStrategy);\\n        want.transfer(_newStrategy, want.balanceOf(address(this)));\\n    }\\n\\n    function setEmergencyExit() external {\\n        require(msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        emergencyExit = true;\\n        exitPosition();\\n        vault.revokeStrategy();\\n    }\\n\\n    // Override this to add all tokens/tokenized positions this contract manages\\n    // on a *persistant* basis (e.g. not just for swapping back to want ephemerally)\\n    // NOTE: Do *not* include `want`, already included in `sweep` below\\n    //\\n    // Example:\\n    //\\n    //    function protectedTokens() internal override view returns (address[] memory) {\\n    //      address[] memory protected = new address[](3);\\n    //      protected[0] = tokenA;\\n    //      protected[1] = tokenB;\\n    //      protected[2] = tokenC;\\n    //      return protected;\\n    //    }\\n    function protectedTokens() internal virtual view returns (address[] memory);\\n\\n    function sweep(address _token) external {\\n        require(msg.sender == governance(), \\\"!authorized\\\");\\n        require(_token != address(want), \\\"!want\\\");\\n\\n        address[] memory _protectedTokens = protectedTokens();\\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \\\"!protected\\\");\\n\\n        IERC20(_token).transfer(governance(), IERC20(_token).balanceOf(address(this)));\\n    }\\n}\\n\"},\"/Users/username/dev/yearn-truffle-verify/contracts/GenericLender/GenericDyDx.sol\":{\"content\":\"pragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Interfaces/DyDx/ISoloMargin.sol\\\";\\nimport \\\"../Interfaces/DyDx/IInterestSetter.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../Interfaces/UniswapInterfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"./IGenericLender.sol\\\";\\n\\n/********************\\n *   A lender plugin for LenderYieldOptimiser for DyDx\\n *   Made by SamPriestley.com\\n *   https://github.com/Grandthrax/yearnv2/blob/master/contracts/GenericLender/GenericDyDx.sol\\n *\\n ********************* */\\n\\ncontract GenericDyDx is IGenericLender {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 private constant secondPerYear = 31153900; //todo\\n    address private constant SOLO = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n    uint256 public dydxMarketId;\\n\\n    constructor(address _strategy, string memory name) public IGenericLender(_strategy, name) {\\n        want.approve(SOLO, uint256(-1));\\n\\n        ISoloMargin solo = ISoloMargin(SOLO);\\n        uint256 numMarkets = solo.getNumMarkets();\\n        address curToken;\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            curToken = solo.getMarketTokenAddress(i);\\n\\n            if (curToken == address(want)) {\\n                dydxMarketId = i;\\n                return;\\n            }\\n        }\\n        revert(\\\"No marketId found for provided token\\\");\\n    }\\n\\n    function nav() external view override returns (uint256) {\\n        return _nav();\\n    }\\n\\n    function _nav() internal view returns (uint256) {\\n        uint256 underlying = underlyingBalanceStored();\\n        return want.balanceOf(address(this)).add(underlying);\\n    }\\n\\n    function underlyingBalanceStored() public view returns (uint256) {\\n        (address[] memory cur, , Types.Wei[] memory balance) = ISoloMargin(SOLO).getAccountBalances(_getAccountInfo());\\n\\n        for (uint256 i = 0; i < cur.length; i++) {\\n            if (cur[i] == address(want)) {\\n                return balance[i].value;\\n            }\\n        }\\n    }\\n\\n    function apr() external view override returns (uint256) {\\n        return _apr(0);\\n    }\\n\\n    function weightedApr() external view override returns (uint256) {\\n        uint256 a = _apr(0);\\n        return a.mul(_nav());\\n    }\\n\\n    function withdraw(uint256 amount) external override management returns (uint256) {\\n        return _withdraw(amount);\\n    }\\n\\n    //emergency withdraw. sends balance plus amount to governance\\n    function emergencyWithdraw(uint256 amount) external override management {\\n        _withdraw(amount);\\n        want.safeTransfer(vault.governance(), want.balanceOf(address(this)));\\n    }\\n\\n    //withdraw an amount including any want balance\\n    function _withdraw(uint256 amount) internal returns (uint256) {\\n        uint256 balanceUnderlying = underlyingBalanceStored();\\n        uint256 looseBalance = want.balanceOf(address(this));\\n        uint256 total = balanceUnderlying.add(looseBalance);\\n\\n        if (amount > total) {\\n            //cant withdraw more than we own\\n            amount = total;\\n        }\\n        if (looseBalance >= amount) {\\n            want.safeTransfer(address(strategy), amount);\\n            return amount;\\n        }\\n\\n        //not state changing but OK because of previous call\\n        uint256 liquidity = want.balanceOf(SOLO);\\n\\n        if (liquidity > 1) {\\n            uint256 toWithdraw = amount.sub(looseBalance);\\n\\n            if (toWithdraw <= liquidity) {\\n                //we can take all\\n                dydxWithdraw(toWithdraw);\\n            } else {\\n                //take all we can\\n                dydxWithdraw(liquidity);\\n            }\\n        }\\n        looseBalance = want.balanceOf(address(this));\\n        want.safeTransfer(address(strategy), looseBalance);\\n        return looseBalance;\\n    }\\n\\n    function dydxDeposit(uint256 depositAmount) internal {\\n        ISoloMargin solo = ISoloMargin(SOLO);\\n\\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](1);\\n\\n        operations[0] = _getDepositAction(dydxMarketId, depositAmount);\\n\\n        Account.Info[] memory accountInfos = new Account.Info[](1);\\n        accountInfos[0] = _getAccountInfo();\\n\\n        solo.operate(accountInfos, operations);\\n    }\\n\\n    function dydxWithdraw(uint256 amount) internal {\\n        ISoloMargin solo = ISoloMargin(SOLO);\\n\\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](1);\\n\\n        operations[0] = _getWithdrawAction(dydxMarketId, amount);\\n\\n        Account.Info[] memory accountInfos = new Account.Info[](1);\\n        accountInfos[0] = _getAccountInfo();\\n\\n        solo.operate(accountInfos, operations);\\n    }\\n\\n    function deposit() external override management {\\n        uint256 balance = want.balanceOf(address(this));\\n        dydxDeposit(balance);\\n    }\\n\\n    function withdrawAll() external override management returns (bool) {\\n        uint256 balance = _nav();\\n        uint256 returned = _withdraw(balance);\\n        return returned >= balance;\\n    }\\n\\n    //think about this\\n    function enabled() external view override returns (bool) {\\n        return true;\\n    }\\n\\n    function hasAssets() external view override returns (bool) {\\n        return underlyingBalanceStored() > 0;\\n    }\\n\\n    function aprAfterDeposit(uint256 amount) external view override returns (uint256) {\\n        return _apr(amount);\\n    }\\n\\n    function _apr(uint256 extraSupply) internal view returns (uint256) {\\n        ISoloMargin solo = ISoloMargin(SOLO);\\n        Types.TotalPar memory par = solo.getMarketTotalPar(dydxMarketId);\\n        Interest.Index memory index = solo.getMarketCurrentIndex(dydxMarketId);\\n        address interestSetter = solo.getMarketInterestSetter(dydxMarketId);\\n        uint256 borrow = uint256(par.borrow).mul(index.borrow).div(1e18);\\n        uint256 supply = (uint256(par.supply).mul(index.supply).div(1e18)).add(extraSupply);\\n\\n        uint256 borrowInterestRate = IInterestSetter(interestSetter).getInterestRate(address(want), borrow, supply).value;\\n        uint256 lendInterestRate = borrowInterestRate.mul(borrow).div(supply);\\n        return lendInterestRate.mul(secondPerYear);\\n    }\\n\\n    function protectedTokens() internal view override returns (address[] memory) {\\n        address[] memory protected = new address[](1);\\n        protected[0] = address(want);\\n        return protected;\\n    }\\n\\n    function _getWithdrawAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Withdraw,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: false,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: amount\\n                }),\\n                primaryMarketId: marketId,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: \\\"\\\"\\n            });\\n    }\\n\\n    function _getDepositAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Deposit,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: true,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: amount\\n                }),\\n                primaryMarketId: marketId,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: \\\"\\\"\\n            });\\n    }\\n\\n    function _getAccountInfo() internal view returns (Account.Info memory) {\\n        return Account.Info({owner: address(this), number: 0});\\n    }\\n}\\n\"},\"/Users/username/dev/yearn-truffle-verify/contracts/GenericLender/IGenericLender.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"../BaseStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract IGenericLender {\\n    VaultAPI public vault;\\n    BaseStrategy public strategy;\\n    IERC20 public want;\\n    string public lenderName;\\n\\n    uint256 public dust;\\n\\n    constructor(address _strategy, string memory name) public {\\n        strategy = BaseStrategy(_strategy);\\n        vault = VaultAPI(strategy.vault());\\n        want = IERC20(vault.token());\\n        lenderName = name;\\n        dust = 10000;\\n\\n        want.approve(_strategy, uint256(-1));\\n    }\\n\\n    function nav() external view virtual returns (uint256);\\n\\n    function apr() external view virtual returns (uint256);\\n\\n    function weightedApr() external view virtual returns (uint256);\\n\\n    function withdraw(uint256 amount) external virtual returns (uint256);\\n\\n    function emergencyWithdraw(uint256 amount) external virtual;\\n\\n    function deposit() external virtual;\\n\\n    function withdrawAll() external virtual returns (bool);\\n\\n    function enabled() external view virtual returns (bool);\\n\\n    function hasAssets() external view virtual returns (bool);\\n\\n    function aprAfterDeposit(uint256 amount) external view virtual returns (uint256);\\n\\n    function setDust(uint256 _dust) external management {\\n        dust = _dust;\\n    }\\n\\n    function sweep(address _token) external management {\\n        address[] memory _protectedTokens = protectedTokens();\\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \\\"!protected\\\");\\n\\n        IERC20(_token).transfer(vault.governance(), IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    function protectedTokens() internal view virtual returns (address[] memory);\\n\\n    //make sure to use\\n    modifier management() {\\n        require(msg.sender == address(strategy) || msg.sender == vault.governance() || msg.sender == strategy.strategist(), \\\"!management\\\");\\n        _;\\n    }\\n}\\n\"},\"/Users/username/dev/yearn-truffle-verify/contracts/Interfaces/DyDx/IInterestSetter.sol\":{\"content\":\"/*\\n    Copyright 2019 dYdX Trading Inc.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity >=0.5.7;\\npragma experimental ABIEncoderV2;\\n\\nimport {Interest} from \\\"./ISoloMargin.sol\\\";\\n\\n/**\\n * @title IInterestSetter\\n * @author dYdX\\n *\\n * Interface that Interest Setters for Solo must implement in order to report interest rates.\\n */\\ninterface IInterestSetter {\\n    // ============ Public Functions ============\\n\\n    /**\\n     * Get the interest rate of a token given some borrowed and supplied amounts\\n     *\\n     * @param  token        The address of the ERC20 token for the market\\n     * @param  borrowWei    The total borrowed token amount for the market\\n     * @param  supplyWei    The total supplied token amount for the market\\n     * @return              The interest rate per second\\n     */\\n    function getInterestRate(\\n        address token,\\n        uint256 borrowWei,\\n        uint256 supplyWei\\n    ) external view returns (Interest.Rate memory);\\n}\\n\"},\"/Users/username/dev/yearn-truffle-verify/contracts/Interfaces/DyDx/ISoloMargin.sol\":{\"content\":\"pragma solidity >=0.5.7;\\npragma experimental ABIEncoderV2;\\n\\nlibrary Account {\\n    enum Status {Normal, Liquid, Vapor}\\n    struct Info {\\n        address owner; // The address that owns the account\\n        uint256 number; // A nonce that allows a single address to control many accounts\\n    }\\n    struct Storage {\\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\\n        Status status;\\n    }\\n}\\n\\nlibrary Actions {\\n    enum ActionType {\\n        Deposit, // supply tokens\\n        Withdraw, // borrow tokens\\n        Transfer, // transfer balance between accounts\\n        Buy, // buy an amount of some token (publicly)\\n        Sell, // sell an amount of some token (publicly)\\n        Trade, // trade tokens against another account\\n        Liquidate, // liquidate an undercollateralized or expiring account\\n        Vaporize, // use excess tokens to zero-out a completely negative account\\n        Call // send arbitrary data to an address\\n    }\\n\\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\\n\\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\\n\\n    struct ActionArgs {\\n        ActionType actionType;\\n        uint256 accountId;\\n        Types.AssetAmount amount;\\n        uint256 primaryMarketId;\\n        uint256 secondaryMarketId;\\n        address otherAddress;\\n        uint256 otherAccountId;\\n        bytes data;\\n    }\\n\\n    struct DepositArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 market;\\n        address from;\\n    }\\n\\n    struct WithdrawArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 market;\\n        address to;\\n    }\\n\\n    struct TransferArgs {\\n        Types.AssetAmount amount;\\n        Account.Info accountOne;\\n        Account.Info accountTwo;\\n        uint256 market;\\n    }\\n\\n    struct BuyArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 makerMarket;\\n        uint256 takerMarket;\\n        address exchangeWrapper;\\n        bytes orderData;\\n    }\\n\\n    struct SellArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 takerMarket;\\n        uint256 makerMarket;\\n        address exchangeWrapper;\\n        bytes orderData;\\n    }\\n\\n    struct TradeArgs {\\n        Types.AssetAmount amount;\\n        Account.Info takerAccount;\\n        Account.Info makerAccount;\\n        uint256 inputMarket;\\n        uint256 outputMarket;\\n        address autoTrader;\\n        bytes tradeData;\\n    }\\n\\n    struct LiquidateArgs {\\n        Types.AssetAmount amount;\\n        Account.Info solidAccount;\\n        Account.Info liquidAccount;\\n        uint256 owedMarket;\\n        uint256 heldMarket;\\n    }\\n\\n    struct VaporizeArgs {\\n        Types.AssetAmount amount;\\n        Account.Info solidAccount;\\n        Account.Info vaporAccount;\\n        uint256 owedMarket;\\n        uint256 heldMarket;\\n    }\\n\\n    struct CallArgs {\\n        Account.Info account;\\n        address callee;\\n        bytes data;\\n    }\\n}\\n\\nlibrary Decimal {\\n    struct D256 {\\n        uint256 value;\\n    }\\n}\\n\\nlibrary Interest {\\n    struct Rate {\\n        uint256 value;\\n    }\\n\\n    struct Index {\\n        uint96 borrow;\\n        uint96 supply;\\n        uint32 lastUpdate;\\n    }\\n}\\n\\nlibrary Monetary {\\n    struct Price {\\n        uint256 value;\\n    }\\n    struct Value {\\n        uint256 value;\\n    }\\n}\\n\\nlibrary Storage {\\n    // All information necessary for tracking a market\\n    struct Market {\\n        // Contract address of the associated ERC20 token\\n        address token;\\n        // Total aggregated supply and borrow amount of the entire market\\n        Types.TotalPar totalPar;\\n        // Interest index of the market\\n        Interest.Index index;\\n        // Contract address of the price oracle for this market\\n        address priceOracle;\\n        // Contract address of the interest setter for this market\\n        address interestSetter;\\n        // Multiplier on the marginRatio for this market\\n        Decimal.D256 marginPremium;\\n        // Multiplier on the liquidationSpread for this market\\n        Decimal.D256 spreadPremium;\\n        // Whether additional borrows are allowed for this market\\n        bool isClosing;\\n    }\\n\\n    // The global risk parameters that govern the health and security of the system\\n    struct RiskParams {\\n        // Required ratio of over-collateralization\\n        Decimal.D256 marginRatio;\\n        // Percentage penalty incurred by liquidated accounts\\n        Decimal.D256 liquidationSpread;\\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\\n        Decimal.D256 earningsRate;\\n        // The minimum absolute borrow value of an account\\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\\n        Monetary.Value minBorrowedValue;\\n    }\\n\\n    // The maximum RiskParam values that can be set\\n    struct RiskLimits {\\n        uint64 marginRatioMax;\\n        uint64 liquidationSpreadMax;\\n        uint64 earningsRateMax;\\n        uint64 marginPremiumMax;\\n        uint64 spreadPremiumMax;\\n        uint128 minBorrowedValueMax;\\n    }\\n\\n    // The entire storage state of Solo\\n    struct State {\\n        // number of markets\\n        uint256 numMarkets;\\n        // marketId => Market\\n        mapping(uint256 => Market) markets;\\n        // owner => account number => Account\\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\\n        // Addresses that can control other users accounts\\n        mapping(address => mapping(address => bool)) operators;\\n        // Addresses that can control all users accounts\\n        mapping(address => bool) globalOperators;\\n        // mutable risk parameters of the system\\n        RiskParams riskParams;\\n        // immutable risk limits of the system\\n        RiskLimits riskLimits;\\n    }\\n}\\n\\nlibrary Types {\\n    enum AssetDenomination {\\n        Wei, // the amount is denominated in wei\\n        Par // the amount is denominated in par\\n    }\\n\\n    enum AssetReference {\\n        Delta, // the amount is given as a delta from the current value\\n        Target // the amount is given as an exact number to end up at\\n    }\\n\\n    struct AssetAmount {\\n        bool sign; // true if positive\\n        AssetDenomination denomination;\\n        AssetReference ref;\\n        uint256 value;\\n    }\\n\\n    struct TotalPar {\\n        uint128 borrow;\\n        uint128 supply;\\n    }\\n\\n    struct Par {\\n        bool sign; // true if positive\\n        uint128 value;\\n    }\\n\\n    struct Wei {\\n        bool sign; // true if positive\\n        uint256 value;\\n    }\\n}\\n\\ninterface ISoloMargin {\\n    struct OperatorArg {\\n        address operator1;\\n        bool trusted;\\n    }\\n\\n    function ownerSetSpreadPremium(uint256 marketId, Decimal.D256 memory spreadPremium) external;\\n\\n    function getIsGlobalOperator(address operator1) external view returns (bool);\\n\\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\\n\\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter) external;\\n\\n    function getAccountValues(Account.Info memory account) external view returns (Monetary.Value memory, Monetary.Value memory);\\n\\n    function getMarketPriceOracle(uint256 marketId) external view returns (address);\\n\\n    function getMarketInterestSetter(uint256 marketId) external view returns (address);\\n\\n    function getMarketSpreadPremium(uint256 marketId) external view returns (Decimal.D256 memory);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function ownerWithdrawUnsupportedTokens(address token, address recipient) external returns (uint256);\\n\\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue) external;\\n\\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) external;\\n\\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) external;\\n\\n    function getIsLocalOperator(address owner, address operator1) external view returns (bool);\\n\\n    function getAccountPar(Account.Info memory account, uint256 marketId) external view returns (Types.Par memory);\\n\\n    function ownerSetMarginPremium(uint256 marketId, Decimal.D256 memory marginPremium) external;\\n\\n    function getMarginRatio() external view returns (Decimal.D256 memory);\\n\\n    function getMarketCurrentIndex(uint256 marketId) external view returns (Interest.Index memory);\\n\\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\\n\\n    function getRiskParams() external view returns (Storage.RiskParams memory);\\n\\n    function getAccountBalances(Account.Info memory account)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            Types.Par[] memory,\\n            Types.Wei[] memory\\n        );\\n\\n    function renounceOwnership() external;\\n\\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\\n\\n    function setOperators(OperatorArg[] memory args) external;\\n\\n    function getMarketPrice(uint256 marketId) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient) external returns (uint256);\\n\\n    function ownerAddMarket(\\n        address token,\\n        address priceOracle,\\n        address interestSetter,\\n        Decimal.D256 memory marginPremium,\\n        Decimal.D256 memory spreadPremium\\n    ) external;\\n\\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\\n\\n    function getMarketWithInfo(uint256 marketId)\\n        external\\n        view\\n        returns (\\n            Storage.Market memory,\\n            Interest.Index memory,\\n            Monetary.Price memory,\\n            Interest.Rate memory\\n        );\\n\\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) external;\\n\\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\\n\\n    function getAccountWei(Account.Info memory account, uint256 marketId) external view returns (Types.Wei memory);\\n\\n    function getMarketTotalPar(uint256 marketId) external view returns (Types.TotalPar memory);\\n\\n    function getLiquidationSpreadForPair(uint256 heldMarketId, uint256 owedMarketId) external view returns (Decimal.D256 memory);\\n\\n    function getNumExcessTokens(uint256 marketId) external view returns (Types.Wei memory);\\n\\n    function getMarketCachedIndex(uint256 marketId) external view returns (Interest.Index memory);\\n\\n    function getAccountStatus(Account.Info memory account) external view returns (uint8);\\n\\n    function getEarningsRate() external view returns (Decimal.D256 memory);\\n\\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\\n\\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\\n\\n    function getMarket(uint256 marketId) external view returns (Storage.Market memory);\\n\\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\\n\\n    function ownerSetGlobalOperator(address operator1, bool approved) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function getAdjustedAccountValues(Account.Info memory account) external view returns (Monetary.Value memory, Monetary.Value memory);\\n\\n    function getMarketMarginPremium(uint256 marketId) external view returns (Decimal.D256 memory);\\n\\n    function getMarketInterestRate(uint256 marketId) external view returns (Interest.Rate memory);\\n}\\n\"},\"/Users/username/dev/yearn-truffle-verify/contracts/Interfaces/UniswapInterfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\"},\"/Users/username/dev/yearn-truffle-verify/contracts/Interfaces/UniswapInterfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"}},\"settings\":{\"remappings\":[],\"optimizer\":{\"enabled\":true,\"runs\":200},\"evmVersion\":\"istanbul\",\"libraries\":{\"\":{}}}}",
  "codeformat": "solidity-standard-json-input",
  "contractname": "/Users/username/dev/yearn-truffle-verify/contracts/GenericLender/GenericDyDx.sol:GenericDyDx",
  "compilerversion": "v0.6.12+commit.27d51765",
  "constructorArguements": "000000000000000000000000520a45e22b1eb5d7bde09a445e70708d2957b3650000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000e447944784c656e64657257657468000000000000000000000000000000000000"
}
Checking status of verification request qdtxizy1bwx4wqpqgnrajeuqzjeyzfic7uwgg1nb6ff5wc2kgu
Fail - Unable to verify
Failed to verify 1 contract(s): GenericDyDx@0xeBb622A21Cc341E3A293E892D16C34A39f8b3c34
